geom_point()
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy),colour=Accuracy>0.62)+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('red','green'),c(T, F)))+
geom_point()
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy,colour=Accuracy>0.62))+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('red','green'),c(T, F)))+
geom_point()
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy,colour=Accuracy>0.62))+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('red','green'),c(T, F)))+
geom_point(5)
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy,colour=Accuracy>0.62))+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('red','green'),c(T, F)))+
geom_point()
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy,colour=Accuracy>0.62))+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('red','green'),c(T, F)))+
geom_point(size=2)
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy,colour=Accuracy>0.62))+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('red','green'),c(T, F)))+
geom_point(size=4)
ggplot(matrix_of_accuracy_of_prediction,aes(x=Team_name,y=Accuracy,colour=Accuracy>0.62))+
scale_colour_manual(name = 'Accuracy > 0.62', values = setNames(c('green','red'),c(T, F)))+
geom_point(size=4)
table(df$month,df$true_predicted_goals)
table(df$month,df$true_predicted_goals,sum(df$true_predicted_goals))
table(df$month,df$true_predicted_goals)
ggplot(df,aes(df$month,df$true_predicted_goals))+geom_bar()
install.packages("reshape2")
library(reshape2)
df_long <- reshape2::melt(df,id="month")
ggplot(df_long,aes(x=month,y=true_predicted_goals,fill=true_predicted_goals,label=true_predicted_goals))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
df_long
ggplot(df_long,aes(x=month,y=value,fill=variable,label=value))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
ggplot(df_long,aes(x=category,y=value,fill=variable,label=value))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
ggplot(df_long,aes(x=month,y=value,fill=variable,label=value))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
ggplot(df_long,aes(x=month,y=value,fill=variable,label=value))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
summay(df)
summary(df)
ncol(df)
df_long <- reshape2::melt(df[,c(31,34)],id="month")
df_long <- reshape2::melt(df[,c(30,34)],id="month")
df_long
ggplot(df_long,aes(x=month,y=value,fill=variable,label=value))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
ggplot(df_long,aes(x=month,y=value,fill=variable,label=value))+
geom_bar(stat="identity")+
geom_text(size = 3, position = position_stack(vjust = 0.5))
write.csv(df,"data/goal_pred_df.csv")
summary(df)
df$FTR <- as.factor(df$FTR)
df$HTR <- as.factor(df$HTR)
summary(df)
table(df$Time,df$HS)
table(df$Time)
table(df$Time,df$FTR)
df[1]
df[1,]
ncol(df)
df[,c(25,26,27)]
min(df[,c(25,26,27)])
min(df[1,c(25,26,27)])
m_c <- min(df[1,c(25,26,27)])
df$predicted_result <- NA
ncol(df)
for(i in 1:nrow(df)){
min_c <- min(df[i,c(25,26,27)])
ifelse(min_c==df[i,25],df[i,35]<-'H',
ifelse(min_c==df[i,26],df[i,35]<-'D',
df[i,35]<-'A'))
}
df[1,]
df$predicted_result <- as.factor(df$predicted_result)
summary(df$predicted_result)
for(i in 1:nrow(df)){
min_c <- min(df[i,c(25,26,27)])
ifelse(min_c==df[i,25],df[i,35]<-'H',
ifelse(min_c==df[i,26],df[i,35]<-'D',
df[i,35]<-'A'))
}
summary(df$predicted_result)
df$true_predicted_result <- as.factor(ifelse(df$predicted_result==df$FTR,'Yes','No'))
summary(df$predicted_result)
min(df[,26])
df$predicted_result <- levels(df$FTR)
summary(df$predicted_result)
summary(df$FTR)
df[26]
df[360,26]
df[360,35]<-'D'
summary(df$predicted_result)
df$predicted_result[is.na(df$predicted_result)]<-as.factor('D')
summary(df$predicted_result)
df$predicted_result[is.na(df$predicted_result)]<-'D'
df$predicted_result <- factor(df$predicted_result,levels = c("H","D","A"))
summary(df$predicted_result)
df$predicted_result[is.na(df$predicted_result)]<-'D'
summary(df$predicted_result)
df$true_predicted_result <- as.factor(ifelse(df$predicted_result==df$FTR,'Yes','No'))
summary(df)
df$final_at_half <- NA
df$final_at_half <- as.factor(ifelse(df$HTR==df$FTR,'Yes','No'))
summary(df$final_at_half)
summary(df)
write.csv(df,"data/prediction_result.csv")
df <- read.csv("data/prediction_result.csv")
summary(df)
summary(df$HomeTeam)
df$home_predicted_rating <- as.factor(ifelse(df$HomeTeam=='Man City' | df$HomeTeam=='Liverpool' |
df$HomeTeam=='Chelsea' | df$HomeTeam=='Tottenham' |
df$HomeTeam=='Arsenal','top',
ifelse(df$HomeTeam=='Man United' | df$HomeTeam=='Everton' |
df$HomeTeam=='Leicester' | df$HomeTeam=='Wolves' |
df$HomeTeam=='Crystal Palace','high',
ifelse(df$HomeTeam=='Bournemouth' | df$HomeTeam=='West Ham' |
df$HomeTeam=='Watford' | df$HomeTeam=='Newcastle' |
df$HomeTeam=='Southampton','mid','low'
)
)))
Tottenham
summary(df$home_predicted_rating)
df[1,]
df[190,]
df$away_predicted_rating <- as.factor(ifelse(df$AwayTeam=='Man City' | df$AwayTeam=='Liverpool' |
df$AwayTeam=='Chelsea' | df$AwayTeam=='Tottenham' |
df$AwayTeam=='Arsenal','top',
ifelse(df$AwayTeam=='Man United' | df$AwayTeam=='Everton' |
df$AwayTeam=='Leicester' | df$AwayTeam=='Wolves' |
df$AwayTeam=='Crystal Palace','high',
ifelse(df$AwayTeam=='Bournemouth' | df$AwayTeam=='West Ham' |
df$AwayTeam=='Watford' | df$AwayTeam=='Newcastle' |
df$AwayTeam=='Southampton','mid','low'
)
)))
summary(df)
df[1,]
df$home_predicted_rating>df$away_predicted_rating
df$home_predicted_rating[1,]>df$away_predicted_rating[1,]
df$home_predicted_rating[1]>df$away_predicted_rating[1]
summary(df$HomeTeam)
df$home_final_rating <- as.factor(ifelse(df$HomeTeam=='Man City' | df$HomeTeam=='Liverpool' |
df$HomeTeam=='Chelsea' | df$HomeTeam=='Leicester' |
df$HomeTeam=='Man United','top',
ifelse(df$HomeTeam=='Arsenal' | df$HomeTeam=='Sheffield United' |
df$HomeTeam=='Tottenham' | df$HomeTeam=='Wolves' |
df$HomeTeam=='Burnley','high',
ifelse(df$HomeTeam=='Everton' | df$HomeTeam=='Crystal Palace' |
df$HomeTeam=='Brighton' | df$HomeTeam=='Newcastle' |
df$HomeTeam=='Southampton','mid','low'
)
)))
summary(df)
df[1,]
df$away_final_rating <- as.factor(ifelse(df$AwayTeam=='Man City' | df$AwayTeam=='Liverpool' |
df$AwayTeam=='Chelsea' | df$AwayTeam=='Leicester' |
df$AwayTeam=='Man United','top',
ifelse(df$AwayTeam=='Arsenal' | df$AwayTeam=='Sheffield United' |
df$AwayTeam=='Tottenham' | df$AwayTeam=='Wolves' |
df$AwayTeam=='Burnley','high',
ifelse(df$AwayTeam=='Everton' | df$AwayTeam=='Crystal Palace' |
df$AwayTeam=='Brighton' | df$AwayTeam=='Newcastle' |
df$AwayTeam=='Southampton','mid','low'
)
)))
summary(df)
df[1,]
df[192,]
summary(df$away_final_rating)
table(df$home_final_rating)
table(df$home_final_rating,df$home_predicted_rating)
table(df$home_final_rating,df$HomeTeam)
df$home_predicted_rating <- factor(df$home_final_rating,levels = c("low","mid","high","top"))
table(df$home_final_rating,df$HomeTeam)
table(df$home_predicted_rating,df$HomeTeam)
df$home_final_rating <- factor(df$home_final_rating,levels = c("low","mid","high","top"))
df$away_predicted_rating <- factor(df$away_predicted_rating,levels = c("low","mid","high","top"))
df$away_final_rating <- factor(df$away_final_rating,levels = c("low","mid","high","top"))
summary(df)
table(df$true_predicted_result,df$true_predicted_goals)
table(df$true_predicted_result,df$true_predicted_goals,df$home_final_rating)
table(df$true_predicted_result,df$true_predicted_goals,df$home_final_rating,df$away_final_rating)
a <- table(df$true_predicted_result,df$true_predicted_goals,df$home_final_rating,df$away_final_rating)
a
a[2]
a[1]
a[3]
a[33]
a
a[1:4]
a[1,2]
a[1,]
a[[1]]
a[[2]]
summary(a)
nrow(a)
ncol(a)
a[380]
a[379]
a[[379]]
a[[39]]
a[[80]]
a[80]
a[64]
a[65]
a[64]
predicted_eval <- data.frame()
for(i in 1:64){
FF <- a[j=j+1]
TF <- a[j=j+1]+a[j=j+1]
TT <- a[j=j+1]
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
j = 1
predicted_eval <- data.frame()
for(i in 1:64){
FF <- a[j=j+1]
TF <- a[j=j+1]+a[j=j+1]
TT <- a[j=j+1]
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
predicted_eval
predicted_eval <- data.frame()
for(i in 1:64){
FF <- a[j]
j = j+1
TF <- a[j]+a[j+1]
j = j+1
TT <- a[j]
j = j+1
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
predicted_eval
predicted_eval <- data.frame()
completly_predicted <- TT/(TT+TF+FF)
predicted_eval
for(i in 1:64){
FF <- a[j]
j = j+1
TF <- a[j]+a[j+1]
j = j+1
TT <- a[j]
j = j+1
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
predicted_eval
predicted_eval <- data.frame()
for(i in 1:64){
FF <- a[j]
j = j+1
TF <- a[j]+a[j+1]
j = j+2
TT <- a[j]
j = j+1
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
predicted_eval
j = 1
a[64]
predicted_eval <- data.frame()
for(i in 1:18){
FF <- a[j]
j = j+1
TF <- a[j]+a[j+1]
j = j+2
TT <- a[j]
j = j+1
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
predicted_eval
j = 1
a[64]
predicted_eval <- data.frame()
for(i in 1:16){
FF <- a[j]
j = j+1
TF <- a[j]+a[j+1]
j = j+2
TT <- a[j]
j = j+1
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
predicted_eval
names(predicted_eval)<-c("completly accurate prediction","incomplete prediction","completly false prediction")
predicted_eval
a
predicted_eval$finalyrank <- NA
predicted_eval[1,4] <- 'low vs low'
predicted_eval[2,4] <- 'mid vs low'
predicted_eval[3,4] <- 'high vs low'
predicted_eval[1,4] <- 'top vs low'
predicted_eval
predicted_eval[1,4] <- 'low vs low'
predicted_eval[2,4] <- 'mid vs low'
predicted_eval[3,4] <- 'high vs low'
predicted_eval[4,4] <- 'top vs low'
predicted_eval
a
predicted_eval[5,4] <- 'low vs mid'
predicted_eval[6,4] <- 'mid vs mid'
predicted_eval[7,4] <- 'high vs mid'
predicted_eval[8,4] <- 'top vs mid'
predicted_eval[9,4] <- 'low vs high'
predicted_eval[10,4] <- 'mid vs high'
predicted_eval[11,4] <- 'high vs high'
predicted_eval[12,4] <- 'top vs high'
predicted_eval[1,4] <- 'low vs low'
predicted_eval[2,4] <- 'mid vs low'
predicted_eval[3,4] <- 'high vs low'
predicted_eval[4,4] <- 'top vs low'
predicted_eval[5,4] <- 'low vs mid'
predicted_eval[6,4] <- 'mid vs mid'
predicted_eval[7,4] <- 'high vs mid'
predicted_eval[8,4] <- 'top vs mid'
predicted_eval[9,4] <- 'low vs high'
predicted_eval[10,4] <- 'mid vs high'
predicted_eval[11,4] <- 'high vs high'
predicted_eval[12,4] <- 'top vs high'
predicted_eval[13,4] <- 'low vs top'
predicted_eval[14,4] <- 'mid vs top'
predicted_eval[15,4] <- 'high vs top'
predicted_eval[16,4] <- 'top vs top'
predicted_eval
write.csv(predicted_eval,"data/accuracy_of_prediction_by_rank.csv")
library(ggplot2)
ggplot(predicted_eval,aes(x=finalyrank,y=completly accurate prediction))+geom_point(size=4)
names(predicted_eval)<-names("completly_accurate_prediction","incomplete_prediction","completly_false_prediction","finaly_rank")
names(predicted_eval)<-c("completly_accurate_prediction","incomplete_prediction","completly_false_prediction","finaly_rank")
ggplot(predicted_eval,aes(x=finaly_rank,y=completly_accurate_prediction))+geom_point(size=4)
predicted_eval$completly_accurate_prediction <- factor(predicted_eval$finaly_rank,levels = predicted_eval$finaly_rank[order(predicted_eval$completly_accurate_prediction)])
ggplot(predicted_eval,aes(x=finaly_rank,y=completly_accurate_prediction))+geom_point(size=4)
predicted_eval$completly_accurate_prediction <- factor(predicted_eval$finaly_rank,levels = predicted_eval$finaly_rank[order(predicted_eval$completly_accurate_prediction)])
predicted_eval
j = 1
a[64]
predicted_eval <- data.frame()
for(i in 1:16){
FF <- a[j]
j = j+1
TF <- a[j]+a[j+1]
j = j+2
TT <- a[j]
j = j+1
completly_predicted <- TT/(TT+TF+FF)
not_completly_predicted <- TF/(TT+TF+FF)
false_predicted <- FF/(TT+TF+FF)
predicted_eval <- rbind(predicted_eval,c(completly_predicted,not_completly_predicted,false_predicted))
}
names(predicted_eval)<-c("completly_accurate_prediction","incomplete_prediction","completly_false_prediction")
predicted_eval
a
predicted_eval$finalyrank <- NA
predicted_eval[1,4] <- 'low vs low'
predicted_eval[2,4] <- 'mid vs low'
predicted_eval[3,4] <- 'high vs low'
predicted_eval[4,4] <- 'top vs low'
predicted_eval[5,4] <- 'low vs mid'
predicted_eval[6,4] <- 'mid vs mid'
predicted_eval[7,4] <- 'high vs mid'
predicted_eval[8,4] <- 'top vs mid'
predicted_eval[9,4] <- 'low vs high'
predicted_eval[10,4] <- 'mid vs high'
predicted_eval[11,4] <- 'high vs high'
predicted_eval[12,4] <- 'top vs high'
predicted_eval[13,4] <- 'low vs top'
predicted_eval[14,4] <- 'mid vs top'
predicted_eval[15,4] <- 'high vs top'
predicted_eval[16,4] <- 'top vs top'
predicted_eval
names(predicted_eval)<-c("completly_accurate_prediction","incomplete_prediction","completly_false_prediction","finaly_rank")
predicted_eval$finaly_rank <- factor(predicted_eval$finaly_rank,levels = predicted_eval$finaly_rank[order(predicted_eval$completly_accurate_prediction)])
ggplot(predicted_eval,aes(x=finaly_rank,y=completly_accurate_prediction))+geom_point(size=4)
summary(df)
write.csv(df,"data/df_with_rating.csv")
df <- read.csv("data/df_with_rating.csv")
summary(df)
summary(df)
df_new <- df[,c(41,42,36,33,10,13,16,17,18,19,20,21,22,23,24,25,26,27,35)]
summary(df_new)
df_new <- df[,c(40,41,35,32,10,13,15,16,17,18,19,20,21,22,23,24,25,26,34)]
summary(df_new)
ncol(df_new)
#classification tree
install.packages("caret")
install.packages("caret")
library(caret)
library(car)
install.packages("car")
library(car)
train.indices <- createDataPartition(df_new$more_2.5,p=0.8)
install.packages("e1071")
library(e1071)
train.indices <- createDataPartition(df_new$more_2.5,p=0.8)
#classification tree
install.packages("caret")
#classification tree
install.packages("caret")
library(caret)
library(caret)
library(caret)
library(caret)
install.packages("rlang")
library(caret)
install.packages("rlang")
install.packages("rlang")
#classification tree
install.packages("caret")
library(caret)
install.packages("vctrs")
library(caret)
train.indices <- createDataPartition(df_new$more_2.5,p=0.8)
summary(df_new[train.indices])
summary(df_new[train.indices,])
train.indices
train.df <- df_new[train.indices,]
test.df <-df_new[-train.indices,]
ncol(df_new)
summary(df_new)
train.indices <- createDataPartition(df_new$more_2.5,p=0.8,list=FALSE)
train.df <- df_new[train.indices,]
test.df <-df_new[-train.indices,]
summary(train.df)
summary(test.df)
install.packages("rpart")
install.packages("rpart")
library(e1071)
library(rpart)
ncol(train.df)
dt.cv <- train(x=train.df[,-19],
y=train.df$more_2.5,
method='rpart',
control=rpart.control(minsplit=10),
trControl=numFolds,
tuneGrid=cpGrid)
library(e1071)
dt.cv <- train(x=train.df[,-19],
y=train.df$more_2.5,
method='rpart',
control=rpart.control(minsplit=10),
trControl=numFolds,
tuneGrid=cpGrid)
t <- rpart(more_2.5~.,data = train.df)
t
dt.cv <- train(x=train.df[,-19],
y=train.df$more_2.5,
method='rpart',
control=rpart.control(minsplit=10),
trControl=numFolds,
tuneGrid=cpGrid)
#classification tree
install.packages("caret")
library(caret)
dt.cv <- train(x=train.df[,-19],
y=train.df$more_2.5,
method='rpart',
control=rpart.control(minsplit=10),
trControl=numFolds,
tuneGrid=cpGrid)
numFolds <- trainControl(method='cv',number=10)
cpGrid = expand.grid(.cp=seq(0.001,0.05,0.0025))
set.seed(10)
dt.cv <- train(x=train.df[,-19],
y=train.df$more_2.5,
method='rpart',
control=rpart.control(minsplit=10),
trControl=numFolds,
tuneGrid=cpGrid)
optimal_cp <- dt.cv$bestTune$cp
optimal_cp
tree1 <- rpart(more_2.5~.,data=train.df,method='class',
control=rpart.control(minsplit=10,cp=optimal_cp))
tree1
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(tree1)
print(tree1)
print(tree1)
tree1.pred <- predict(tree1,newdata = test.df,type='class')
tree1.pred
tree1.cm <- table(true=test.df$more_2.5,predicted=tree1.pred)
tree1.cm
tree1.accuracy <- (sum(diag(tree1.cm))/sum(tree1.cm))*100
tree1.accuracy
